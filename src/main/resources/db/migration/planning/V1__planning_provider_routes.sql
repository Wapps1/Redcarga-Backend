-- =====================================================
-- SCHEMA del BC Planning
-- =====================================================
CREATE SCHEMA IF NOT EXISTS planning;

-- =====================================================
-- Catálogo: route_types
--   Ejemplos esperados:
--     (1, 'DD', 'Departamento -> Departamento')
--     (2, 'PP', 'Provincia -> Provincia')
--   (Las inserciones se harán en una migración/seeding aparte)
-- =====================================================
CREATE TABLE IF NOT EXISTS planning.route_types (
  route_type_id  INTEGER      PRIMARY KEY,
  code           VARCHAR(8)   NOT NULL UNIQUE,
  name           VARCHAR(120) NOT NULL
);

-- =====================================================
-- Tabla: provider_routes  (rutas dirigidas por empresa)
--   - Cada fila es A -> B
--   - Soporta dos "shapes":
--       * DD: usa SOLO departamentos (provincias NULL)
--       * PP: usa provincias (ambas NOT NULL)
--   - La app garantiza que route_type_id apunte al shape correcto
-- =====================================================
CREATE TABLE IF NOT EXISTS planning.provider_routes (
  route_id                 INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  company_id               INTEGER     NOT NULL,                 -- FK a providers.companies
  route_type_id            INTEGER     NOT NULL,                 -- FK a planning.route_types

  origin_department_code   CHAR(2)     NOT NULL,
  dest_department_code     CHAR(2)     NOT NULL,

  origin_province_code     CHAR(4),                               -- NULL en DD; NOT NULL en PP
  dest_province_code       CHAR(4),                               -- NULL en DD; NOT NULL en PP

  is_active                BOOLEAN     NOT NULL,
  created_at               TIMESTAMPTZ NOT NULL,
  updated_at               TIMESTAMPTZ NOT NULL,

  -- Coherencia interna de shape (ambas provincias NULL o ambas NOT NULL)
  CONSTRAINT ck_pr_shape_both_or_none
    CHECK (
      (origin_province_code IS NULL  AND dest_province_code IS NULL) OR
      (origin_province_code IS NOT NULL AND dest_province_code IS NOT NULL)
    ),

  -- Prefijos coherentes cuando hay provincias (PP): las provincias deben pertenecer a los departamentos declarados
  CONSTRAINT ck_pr_pp_origin_prefix
    CHECK (
      origin_province_code IS NULL OR SUBSTRING(origin_province_code FROM 1 FOR 2) = origin_department_code
    ),
  CONSTRAINT ck_pr_pp_dest_prefix
    CHECK (
      dest_province_code IS NULL OR SUBSTRING(dest_province_code FROM 1 FOR 2) = dest_department_code
    ),

  -- FKs catálogos
  CONSTRAINT fk_pr_route_type
    FOREIGN KEY (route_type_id)
    REFERENCES planning.route_types(route_type_id),

  CONSTRAINT fk_pr_company
    FOREIGN KEY (company_id)
    REFERENCES providers.companies(company_id),

  CONSTRAINT fk_pr_origin_dep
    FOREIGN KEY (origin_department_code)
    REFERENCES geo.departments(department_code),

  CONSTRAINT fk_pr_dest_dep
    FOREIGN KEY (dest_department_code)
    REFERENCES geo.departments(department_code),

  CONSTRAINT fk_pr_origin_prov
    FOREIGN KEY (origin_province_code)
    REFERENCES geo.provinces(province_code),

  CONSTRAINT fk_pr_dest_prov
    FOREIGN KEY (dest_province_code)
    REFERENCES geo.provinces(province_code)
);

-- =====================================================
-- Unicidad por empresa (evita duplicados)
--   * DD: misma company + mismo DepO->DepD
--   * PP: misma company + misma ProvO->ProvD
--   (Se distinguen por la presencia/ausencia de provincias)
-- =====================================================

-- DD (provincias NULL)
CREATE UNIQUE INDEX IF NOT EXISTS ux_pr_company_dd
  ON planning.provider_routes (company_id, origin_department_code, dest_department_code)
  WHERE origin_province_code IS NULL AND dest_province_code IS NULL;

-- PP (provincias NOT NULL)
CREATE UNIQUE INDEX IF NOT EXISTS ux_pr_company_pp
  ON planning.provider_routes (company_id, origin_province_code, dest_province_code)
  WHERE origin_province_code IS NOT NULL AND dest_province_code IS NOT NULL;

-- =====================================================
-- Índices de matching (rápidos al nacer una solicitud)
-- =====================================================

-- Pedido ProvA -> ProvB: buscar PP exacto
CREATE INDEX IF NOT EXISTS ix_pr_match_pp
  ON planning.provider_routes (origin_province_code, dest_province_code, company_id)
  WHERE origin_province_code IS NOT NULL AND dest_province_code IS NOT NULL;

-- Pedido ProvA -> ProvB (o DepX -> DepY): buscar DD por departamentos
CREATE INDEX IF NOT EXISTS ix_pr_match_dd
  ON planning.provider_routes (origin_department_code, dest_department_code, company_id)
  WHERE origin_province_code IS NULL AND dest_province_code IS NULL;

-- Listado de rutas por empresa (pantalla de configuración)
CREATE INDEX IF NOT EXISTS ix_pr_company
  ON planning.provider_routes (company_id, route_type_id);
