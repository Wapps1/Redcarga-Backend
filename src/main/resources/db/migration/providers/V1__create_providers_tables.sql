-- Schema del BC Providers
CREATE SCHEMA IF NOT EXISTS providers;

-- =========================
-- Tabla: companies
-- =========================
CREATE TABLE IF NOT EXISTS providers.companies (
    company_id             INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    legal_name             VARCHAR(200) NOT NULL,
    trade_name             VARCHAR(200),
    ruc                    VARCHAR(20)  NOT NULL,
    email                  VARCHAR(200) NOT NULL,
    phone                  VARCHAR(50)  NOT NULL,
    address                VARCHAR(400),
    status                 VARCHAR(16)  NOT NULL DEFAULT 'SUBMITTED', -- SUBMITTED|VERIFIED|DISABLED
    created_by_account_id  INTEGER      NOT NULL, -- 1 company por account
    created_at             TIMESTAMPTZ  NOT NULL DEFAULT now(),
    updated_at             TIMESTAMPTZ  NOT NULL DEFAULT now(),
    CONSTRAINT uq_companies_ruc UNIQUE (ruc),
    CONSTRAINT uq_companies_created_by UNIQUE (created_by_account_id),
    CONSTRAINT ck_companies_status CHECK (status IN ('SUBMITTED','VERIFIED','DISABLED'))
    );

-- =========================
-- Tabla: company_roles (catálogo)
-- =========================
CREATE TABLE IF NOT EXISTS providers.company_roles (
    role_id  INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    code     VARCHAR(40)  NOT NULL,
    name     VARCHAR(120) NOT NULL,
    CONSTRAINT uq_company_roles_code UNIQUE (code)
    );

-- =========================
-- Tabla: company_members
-- =========================
CREATE TABLE IF NOT EXISTS providers.company_members (
    company_id  INTEGER     NOT NULL,
    account_id  INTEGER     NOT NULL, -- viene de IAM
    status      VARCHAR(16) NOT NULL, -- ACTIVE|REMOVED
    joined_at   TIMESTAMPTZ NOT NULL DEFAULT now(),
    CONSTRAINT pk_company_members PRIMARY KEY (company_id, account_id),
    CONSTRAINT ck_company_members_status CHECK (status IN ('ACTIVE','REMOVED')),
    CONSTRAINT fk_company_members_company
    FOREIGN KEY (company_id)
    REFERENCES providers.companies(company_id)
    ON DELETE CASCADE
    );

CREATE INDEX IF NOT EXISTS idx_company_members_account
    ON providers.company_members(account_id);

CREATE INDEX IF NOT EXISTS idx_company_members_company
    ON providers.company_members(company_id);

-- =========================
-- Tabla: company_member_roles
-- =========================
CREATE TABLE IF NOT EXISTS providers.company_member_roles (
    company_id INTEGER NOT NULL,
    account_id INTEGER NOT NULL,
    role_id    INTEGER NOT NULL REFERENCES providers.company_roles(role_id),
    CONSTRAINT pk_company_member_roles PRIMARY KEY (company_id, account_id, role_id),
    CONSTRAINT fk_cmr_member FOREIGN KEY (company_id, account_id)
    REFERENCES providers.company_members(company_id, account_id)
    ON DELETE CASCADE
    );

-- índice útil si consultas roles por usuario
CREATE INDEX IF NOT EXISTS idx_cmr_account
    ON providers.company_member_roles(account_id);

-- =========================
-- Tabla: company_compliance (bandera simple de docs)
-- =========================
CREATE TABLE IF NOT EXISTS providers.company_compliance (
    company_id      INTEGER     PRIMARY KEY,
    docs_status     VARCHAR(16) NOT NULL, -- PENDING|COMPLETED
    last_updated_at TIMESTAMPTZ NOT NULL DEFAULT now(),
    CONSTRAINT ck_company_compliance_status CHECK (docs_status IN ('PENDING','COMPLETED')),
    CONSTRAINT fk_company_compliance_company
    FOREIGN KEY (company_id)
    REFERENCES providers.companies(company_id)
    ON DELETE CASCADE
    );
